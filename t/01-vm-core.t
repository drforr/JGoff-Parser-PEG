#!perl

use strict;
use warnings;

use Test::More tests => 36;

BEGIN {
  use_ok( 'JGoff::Parser::PEG::VM' ) || print "Bail out!";
}

#
# Starts off with the minimal path to exercise an operation. The error paths
# are handled later.
#
my $vm = JGoff::Parser::PEG::VM->new;

#
# Exercise IEnd
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IEnd' }, # pc: 0
  ], q{} ),
  0 )
}

#
# Exercise IFail (and IGiveup internally)
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IFail' }, # pc: 0
    { code => 'IEnd'  }, # pc: 1
  ], q{a} ),
  undef )
}

#
# Exercise IChar (both branches; as noted earlier, errors are checked later.)
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IChar', aux => ord( 'a' ) }, # pc: 0
    { code => 'IEnd'                     }, # pc: 1
  ], q{a} ),
  1 );

  is( $vm->run( [
    { code => 'IChar', aux => ord( 'a' ) }, # pc: 0
    { code => 'IEnd'                     }, # pc: 1
  ], q{b} ),
  undef )
}

#
# Exercise IAny
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IAny' }, # pc: 0
    { code => 'IEnd' }, # pc: 1
  ], q{aa} ),
  1 );

  is( $vm->run( [
    { code => 'IAny' }, # pc: 0
    { code => 'IAny' }, # pc: 1
    { code => 'IEnd' }, # pc: 2
  ], q{a} ),
  undef )
}

#
# Exercise IChoice and IFailTwice, half of ITestAny
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestAny'   }, # pc: 0
    { offset => 7            }, # pc: 1
    { code => 'IChoice'    }, # pc: 2
    { offset => 5            }, # pc: 3
    { code => 'IAny'       }, # pc: 4
    { code => 'IAny'       }, # pc: 5
    { code => 'IFailTwice' }, # pc: 6
    { code => 'IEnd'       }, # pc: 7
  ], q{xa} ),
  undef )
}

#
# Exercise ITestAny
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestAny'   }, # pc: 0
    { offset => 7            }, # pc: 1
    { code => 'IChoice'    }, # pc: 2
    { offset => 5            }, # pc: 3
    { code => 'IAny'       }, # pc: 4
    { code => 'IAny'       }, # pc: 5
    { code => 'IFailTwice' }, # pc: 6
    { code => 'IEnd'       }, # pc: 7
  ], q{x} ),
  0 );

  is( $vm->run( [
    { code => 'ITestAny' }, # pc: 0
    { offset => 3          }, # pc: 1
    { code => 'IFail'    }, # pc: 2
    { code => 'IEnd'     }, # pc: 3
  ], q{} ),
  0 )
}

#
# Exercise ITestChar, IBehind
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestChar', aux => 97 }, # pc: 0
    { offset => 3                      }, # pc: 1
    { code => 'IAny'                 }, # pc: 2
    { code => 'IEnd'                 }, # pc: 3
  ], q{b} ),
  0 );

  is( $vm->run( [
    { code => 'ITestChar', aux => 97     }, # pc: 0
    { offset => 10                         }, # pc: 1
    { code => 'IChoice'                  }, # pc: 2
    { offset => 8                          }, # pc: 3
    { code => 'IAny'                     }, # pc: 4
    { code => 'IChar', aux => ord( 'b' ) }, # pc: 5
    { code => 'IBehind', aux => 1        }, # pc: 6
    { code => 'IChar', aux => ord( 'c' ) }, # pc: 7
    { code => 'ICommit'                  }, # pc: 8
    { offset => 2                          }, # pc: 9
    { code => 'IEnd'                     }, # pc: 10
  ], q{ab} ),
  0 );

  is( $vm->run( [
    { code => 'IBehind', aux => 1        }, # pc: 0
    { code => 'IChar', aux => ord( 'a' ) }, # pc: 1
    { code => 'IEnd'                     }, # pc: 2
  ], q{a} ),
  undef )
}

#
# Exercise ICall, IRet, IJmp
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ICall'                    }, # pc: 0
    { offset => 4                          }, # pc: 1
    { code => 'IEnd'                     }, # pc: 2
    { code => 'IAny'                     }, # pc: 3
    { code => 'ITestChar', aux => 114    }, # pc: 4
    { offset => 16                         }, # pc: 5
    { code => 'IChoice'                  }, # pc: 6
    { offset => 14                         }, # pc: 7
    { code => 'IAny'                     }, # pc: 8
    { code => 'IChar', aux => ord( 'u' ) }, # pc: 9
    { code => 'IChar', aux => ord( 'l' ) }, # pc: 10
    { code => 'IChar', aux => ord( 'e' ) }, # pc: 11
    { code => 'IChar', aux => ord( ' ' ) }, # pc: 12
    { code => 'IChar', aux => ord( "'" ) }, # pc: 13
    { code => 'IChar', aux => ord( '1' ) }, # pc: 14
    { code => 'IChar', aux => ord( "'" ) }, # pc: 15
    { code => 'IChar', aux => ord( ' ' ) }, # pc: 16
    { code => 'IChar', aux => ord( 'm' ) }, # pc: 17
    { code => 'ICommit'                  }, # pc: 18
    { offset => 5                          }, # pc: 19
    { code => 'IAny'                     }, # pc: 20
    { code => 'IJmp'                     }, # pc: 21
    { offset => -17                        }, # pc: 22
    { code => 'IRet'                     }, # pc: 23
    { code => 'IEnd'                     }, # pc: 24
  ],   q{rule '1' m} ),
  10 );

  is( $vm->run( [
    { code => 'ICall'                    }, # pc: 0
    { offset => 4                          }, # pc: 1
    { code => 'IEnd'                     }, # pc: 2
    { code => 'IAny'                     }, # pc: 3
    { code => 'ITestChar', aux => 117    }, # pc: 4
    { offset => 12                         }, # pc: 5
    { code => 'IChoice'                  }, # pc: 6
    { offset => 10                         }, # pc: 7
    { code => 'IAny'                     }, # pc: 8
    { code => 'IChar', aux => ord( 'n' ) }, # pc: 9
    { code => 'IChar', aux => ord( 'd' ) }, # pc: 10
    { code => 'IChar', aux => ord( 'e' ) }, # pc: 11
    { code => 'IChar', aux => ord( 'f' ) }, # pc: 12
    { code => 'IChar', aux => ord( 'i' ) }, # pc: 13
    { code => 'ICommit'                  }, # pc: 14
    { offset => 5                          }, # pc: 15
    { code => 'IAny'                     }, # pc: 16
    { code => 'IJmp'                     }, # pc: 17
    { offset => -13                        }, # pc: 18
    { code => 'IRet'                     }, # pc: 19
    { code => 'IEnd'                     }, # pc: 20
  ],   q{rule '(a table)' undefi} ),
  23 )
}

#
# Exercise ISet
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IBehind', aux => 1 }, # pc: 0
    { code => 'ISet' }, # pc: 1
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x01,0x00,0x00,0xf8,0x01,0x00,0x00,0xf8,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, ] }, # pc: 2
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0x01,0x00,0x00,0xf8,
               0x01,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x09,0x00,0x00,0x00, ] }, # pc: 3
    { offset => -134217727,
      buff => [0x01,0x00,0x00,0xf8,0x01,0x00,0x00,0xf8,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 4
    { offset => -134217727,
      buff => [0x01,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x09,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x78,0x57,0x55,0x9e, ] }, # pc: 5
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x78,0x57,0x55,0x9e,0x5e,0x7f,0x00,0x00, ] }, # pc: 6
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x09,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x78,0x57,0x55,0x9e,
               0x5e,0x7f,0x00,0x00,0x78,0x57,0x55,0x9e, ] }, # pc: 7
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x78,0x57,0x55,0x9e,0x5e,0x7f,0x00,0x00,
               0x78,0x57,0x55,0x9e,0x5e,0x7f,0x00,0x00, ] }, # pc: 8
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0x09,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x78,0x57,0x55,0x9e,
               0x5e,0x7f,0x00,0x00,0x78,0x57,0x55,0x9e,
               0x5e,0x7f,0x00,0x00,0x20,0x4a,0x43,0x01, ] }, # pc: 9
    { code => 'IEnd' }, # pc: 10
  ],   q{} ),
  undef );

  is( $vm->run( [
    { code => 'ISet' }, # pc: 0
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 1
    { offset => 14680064,
      buff => [0x00,0x00,0xe0,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00, ] }, # pc: 2
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x07,0x01,0x00,0x00,0x09,0x00,0x55,0x9e, ] }, # pc: 3
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00,
               0x09,0x00,0x55,0x9e,0x5e,0x7f,0x00,0x00, ] }, # pc: 4
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x07,0x01,0x00,0x00,0x09,0x00,0x55,0x9e,
               0x5e,0x7f,0x00,0x00,0x03,0x00,0x00,0x00, ] }, # pc: 5
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00,
               0x09,0x00,0x55,0x9e,0x5e,0x7f,0x00,0x00,
               0x03,0x00,0x00,0x00,0x06,0x00,0x00,0x00, ] }, # pc: 6
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x07,0x01,0x00,0x00,0x09,0x00,0x55,0x9e,
               0x5e,0x7f,0x00,0x00,0x03,0x00,0x00,0x00,
               0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 7
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00,
               0x09,0x00,0x55,0x9e,0x5e,0x7f,0x00,0x00,
               0x03,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x14,0x15,0x00,0x00, ] }, # pc: 8
    { code => 'IBehind', aux => 1 }, # pc: 9
    { code => 'IEnd' }, # pc: 10
  ],   q{} ),
  undef );

  is( $vm->run( [
    { code => 'ISet' }, # pc: 0
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 1
    { offset => 14680064,
      buff => [0x00,0x00,0xe0,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00, ] }, # pc: 2
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x07,0x01,0x00,0x00,0x00,0x00,0x3d,0x01, ] }, # pc: 3
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00,
               0x00,0x00,0x3d,0x01,0x09,0x00,0x00,0x00, ] }, # pc: 4
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x07,0x01,0x00,0x00,0x00,0x00,0x3d,0x01,
               0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00, ] }, # pc: 5
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00,
               0x00,0x00,0x3d,0x01,0x09,0x00,0x00,0x00,
               0x04,0x00,0x00,0x00,0x02,0x00,0x78,0x78, ] }, # pc: 6
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x07,0x01,0x00,0x00,0x00,0x00,0x3d,0x01,
               0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
               0x02,0x00,0x78,0x78,0x00,0x00,0x00,0x00, ] }, # pc: 7
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x07,0x01,0x00,0x00,
               0x00,0x00,0x3d,0x01,0x09,0x00,0x00,0x00,
               0x04,0x00,0x00,0x00,0x02,0x00,0x78,0x78,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 8
    { code => 'IBehind', aux => 1 }, # pc: 9
    { code => 'IAny' }, # pc: 10
    { code => 'IEnd' }, # pc: 11
  ],   q{6} ),
  1 )
}

#
# Exercise ITestSet
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ICall' }, # pc: 0
    { offset => 4 }, # pc: 1
    { code => 'IEnd' }, # pc: 2
    { code => 'IAny' }, # pc: 3
    { code => 'IChar', aux => ord( '(' ) }, # pc: 4
    { code => 'ITestSet' }, # pc: 5
    { offset => 29,
      buff => [0x1d,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
               0xff,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, ] }, # pc: 6
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xfd,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, ] }, # pc: 7
    { offset => -513,
      buff => [0xff,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x05,0x00,0x00,0x00, ] }, # pc: 8
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x05,0x00,0x00,0x00,0x0d,0x00,0x00,0x00, ] }, # pc: 9
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x05,0x00,0x00,0x00,
               0x0d,0x00,0x00,0x00,0xff,0xff,0xff,0xff, ] }, # pc: 10
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x05,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,
               0xff,0xff,0xff,0xff,0xff,0xfc,0xff,0xff, ] }, # pc: 11
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x05,0x00,0x00,0x00,
               0x0d,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
               0xff,0xfc,0xff,0xff,0xff,0xff,0xff,0xff, ] }, # pc: 12
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x05,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,
               0xff,0xff,0xff,0xff,0xff,0xfc,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, ] }, # pc: 13
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0x05,0x00,0x00,0x00,
               0x0d,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
               0xff,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, ] }, # pc: 14
    { code => 'ITestSet' }, # pc: 15
    { offset => 13,
      buff => [0x0d,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
               0xff,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, ] }, # pc: 16
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xfc,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, ] }, # pc: 17
    { offset => -769,
      buff => [0xff,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff, ] }, # pc: 18
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x00,0x00,0xff,0xff,0x0b,0x00,0xff,0xff, ] }, # pc: 19
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,
               0x0b,0x00,0xff,0xff,0xeb,0xff,0xff,0xff, ] }, # pc: 20
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x00,0x00,0xff,0xff,0x0b,0x00,0xff,0xff,
               0xeb,0xff,0xff,0xff,0x01,0x28,0xff,0xff, ] }, # pc: 21
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,
               0x0b,0x00,0xff,0xff,0xeb,0xff,0xff,0xff,
               0x01,0x28,0xff,0xff,0x07,0x01,0x2f,0x6c, ] }, # pc: 22
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
               0x00,0x00,0xff,0xff,0x0b,0x00,0xff,0xff,
               0xeb,0xff,0xff,0xff,0x01,0x28,0xff,0xff,
               0x07,0x01,0x2f,0x6c,0x0c,0x00,0x00,0x00, ] }, # pc: 23
    { offset => -1,
      buff => [0xff,0xff,0xff,0xff,0x00,0x00,0xff,0xff,
               0x0b,0x00,0xff,0xff,0xeb,0xff,0xff,0xff,
               0x01,0x28,0xff,0xff,0x07,0x01,0x2f,0x6c,
               0x0c,0x00,0x00,0x00,0xe6,0xff,0xff,0xff, ] }, # pc: 24
    { code => 'IAny' }, # pc: 25
    { code => 'IJmp' }, # pc: 26
    { offset => -21 }, # pc: 27
    { code => 'IChar', aux => ord( '(' ) }, # pc: 28
    { code => 'IBehind', aux => 1 }, # pc: 29
    { code => 'ICall' }, # pc: 30
    { offset => -26 }, # pc: 31
    { code => 'IJmp' }, # pc: 32
    { offset => -27 }, # pc: 33
    { code => 'IChar', aux => ord( ')' ) }, # pc: 34
    { code => 'IRet' }, # pc: 35
    { code => 'IEnd' }, # pc: 36
  ],   q{(al())()} ),
  6 )
}

#
# Exercise ISpan
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ISpan' }, # pc: 0
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x03,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 1
    { offset => 67043328,
      buff => [0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x02,0x00,0x2f,0x6c, ] }, # pc: 2
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x02,0x00,0x2f,0x6c,0x00,0x00,0x00,0x00, ] }, # pc: 3
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x02,0x00,0x2f,0x6c,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 4
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x02,0x00,0x2f,0x6c,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x07, ] }, # pc: 5
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x02,0x00,0x2f,0x6c,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0xfe,0xff,0xff,0x07,0xfe,0xff,0xff,0x07, ] }, # pc: 6
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x02,0x00,0x2f,0x6c,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x07,
               0xfe,0xff,0xff,0x07,0x00,0x00,0x00,0x00, ] }, # pc: 7
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x02,0x00,0x2f,0x6c,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0xfe,0xff,0xff,0x07,0xfe,0xff,0xff,0x07,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 8
    { code => 'ISet' }, # pc: 9
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0xfe,0xff,0xff,0x07,0xfe,0xff,0xff,0x07,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 10
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x07,
               0xfe,0xff,0xff,0x07,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, ] }, # pc: 11
    { offset => 134217726,
      buff => [0xfe,0xff,0xff,0x07,0xfe,0xff,0xff,0x07,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 12
    { offset => 134217726,
      buff => [0xfe,0xff,0xff,0x07,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x03, ] }, # pc: 13
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00, ] }, # pc: 14
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x03,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 15
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 16
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x03,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 17
    { code => 'ISet' }, # pc: 18
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x03,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 19
    { offset => 67043328,
      buff => [0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x03,0x00,0x01,0x00, ] }, # pc: 20
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x03,0x00,0x01,0x00,0x03,0x00,0x00,0x00, ] }, # pc: 21
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x03,0x00,0x01,0x00,
               0x03,0x00,0x00,0x00,0x12,0x00,0x00,0x00, ] }, # pc: 22
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x03,0x00,0x01,0x00,0x03,0x00,0x00,0x00,
               0x12,0x00,0x00,0x00,0x09,0x00,0x00,0x00, ] }, # pc: 23
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x03,0x00,0x01,0x00,
               0x03,0x00,0x00,0x00,0x12,0x00,0x00,0x00,
               0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 24
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x03,0x00,0x01,0x00,0x03,0x00,0x00,0x00,
               0x12,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x90,0x00,0x00,0x00, ] }, # pc: 25
    { offset => 0,
      buff => [0x00,0x00,0x00,0x00,0x03,0x00,0x01,0x00,
               0x03,0x00,0x00,0x00,0x12,0x00,0x00,0x00,
               0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ] }, # pc: 26
    { code => 'ITestAny' }, # pc: 27
    { offset => 3 }, # pc: 28
    { code => 'IFail' }, # pc: 29
    { code => 'IEnd' }, # pc: 30
  ],   q{1298a1} ),
  6 )
}





{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IEnd' }, # pc: 0
  ], q{a} ),
  0 )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IChar', aux => ord( 'a' ) }, # pc: 0
    { code => 'IEnd' }, # pc: 1
  ], q{alo} ),
  1 )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IFail' }, # pc: 0
    { code => 'IChar', aux => ord( 'a' ) }, # pc: 1
    { code => 'IEnd' }, # pc: 2
  ], q{a} ),
  undef )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IChar', aux => ord( 'a' ) }, # pc: 0
    { code => 'IFail' }, # pc: 1
    { code => 'IEnd' }, # pc: 2
  ], q{a} ),
  undef )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IChar', aux => ord( 'a' ) }, # pc: 0
    { code => 'IChar', aux => ord( 'l' ) }, # pc: 1
    { code => 'IEnd' }, # pc: 2
  ], q{alo} ),
  2 )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IChar', aux => ord( 'a' ) }, # pc: 0
    { code => 'IChar', aux => ord( 'l' ) }, # pc: 1
    { code => 'IChar', aux => ord( 'u' ) }, # pc: 2
    { code => 'IEnd' }, # pc: 3
  ], q{alo} ),
  undef )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestAny' }, # pc: 0
    { offset => 3 }, # pc: 1
    { code => 'IFail' }, # pc: 2
    { code => 'IEnd' }, # pc: 3
  ],   q{a} ),
  undef )
}
#
# Exercise IAny
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IAny' }, # pc: 0
    { code => 'IAny' }, # pc: 1
    { code => 'IAny' }, # pc: 2
    { code => 'IEnd' }, # pc: 3
  ], q{aaaa} ),
  3 )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IAny' }, # pc: 0
    { code => 'IAny' }, # pc: 1
    { code => 'IAny' }, # pc: 2
    { code => 'IAny' }, # pc: 3
    { code => 'IEnd' }, # pc: 4
  ], q{aaaa} ),
  4 )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'IAny' }, # pc: 0
    { code => 'IAny' }, # pc: 1
    { code => 'IAny' }, # pc: 2
    { code => 'IAny' }, # pc: 3
    { code => 'IAny' }, # pc: 4
    { code => 'IEnd' }, # pc: 5
  ], q{aaaa} ),
  undef )
}
#
# Exercise IFailTwice
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestAny' }, # pc: 0
    { offset => 8 }, # pc: 1
    { code => 'IChoice' }, # pc: 2
    { offset => 6 }, # pc: 3
    { code => 'IAny' }, # pc: 4
    { code => 'IAny' }, # pc: 5
    { code => 'IAny' }, # pc: 6
    { code => 'IFailTwice' }, # pc: 7
    { code => 'IEnd' }, # pc: 8
  ], q{aa} ),
  0 )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestAny' }, # pc: 0
    { offset => 8 }, # pc: 1
    { code => 'IChoice' }, # pc: 2
    { offset => 6 }, # pc: 3
    { code => 'IAny' }, # pc: 4
    { code => 'IAny' }, # pc: 5
    { code => 'IAny' }, # pc: 6
    { code => 'IFailTwice' }, # pc: 7
    { code => 'IEnd' }, # pc: 8
  ], q{aaa} ),
  undef )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestAny' }, # pc: 0
    { offset => 8 }, # pc: 1
    { code => 'IChoice' }, # pc: 2
    { offset => 6 }, # pc: 3
    { code => 'IAny' }, # pc: 4
    { code => 'IAny' }, # pc: 5
    { code => 'IAny' }, # pc: 6
    { code => 'IFailTwice' }, # pc: 7
    { code => 'IEnd' }, # pc: 8
  ], q{aaaa} ),
  undef )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestAny' }, # pc: 0
    { offset => 9 }, # pc: 1
    { code => 'IChoice' }, # pc: 2
    { offset => 7 }, # pc: 3
    { code => 'IAny' }, # pc: 4
    { code => 'IAny' }, # pc: 5
    { code => 'IAny' }, # pc: 6
    { code => 'IAny' }, # pc: 7
    { code => 'IFailTwice' }, # pc: 8
    { code => 'IEnd' }, # pc: 9
  ], q{aaaa} ),
  undef )
}
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestAny' }, # pc: 0
    { offset => 10 }, # pc: 1
    { code => 'IChoice' }, # pc: 2
    { offset => 8 }, # pc: 3
    { code => 'IAny' }, # pc: 4
    { code => 'IAny' }, # pc: 5
    { code => 'IAny' }, # pc: 6
    { code => 'IAny' }, # pc: 7
    { code => 'IAny' }, # pc: 8
    { code => 'IFailTwice' }, # pc: 9
    { code => 'IEnd' }, # pc: 10
  ], q{aaaa} ),
  0 )
}

#
# Exercise IPartialCommit
#
{ # local $JGoff::Parser::PEG::VM::TRACE = 2;
  is( $vm->run( [
    { code => 'ITestChar', aux => 97 }, # pc: 0
    { offset => 16 }, # pc: 1
    { code => 'IChoice' }, # pc: 2
    { offset => 14 }, # pc: 3
    { code => 'IAny' }, # pc: 4
    { code => 'IChar', aux => ord( 'b' ) }, # pc: 5
    { code => 'ITestChar', aux => 99 }, # pc: 6
    { offset => 8 }, # pc: 7
    { code => 'IPartialCommit' }, # pc: 8
    { offset => 2 }, # pc: 9
    { code => 'IChar', aux => ord( 'c' ) }, # pc: 10
    { code => 'IChar', aux => ord( 'd' ) }, # pc: 11
    { code => 'IPartialCommit' }, # pc: 12
    { offset => -2 }, # pc: 13
    { code => 'ICommit' }, # pc: 14
    { offset => 2 }, # pc: 15
    { code => 'IEnd' }, # pc: 16
  ],   q{abcdcdc} ),
  6 )
}

#use YAML;warn Dump($vm->covered);
#use YAML;warn Dump($vm->uncovered);
